// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Explore renders correctly 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <View
    collapsable={false}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#f5faff",
        "borderRadius": 5,
        "display": "flex",
        "elevation": 5,
        "flexDirection": "row",
        "height": "4%",
        "justifyContent": "space-between",
        "left": "75%",
        "position": "absolute",
        "shadowColor": "black",
        "shadowOffset": {
          "height": 4,
          "width": -2,
        },
        "shadowOpacity": 0.33,
        "shadowRadius": 10,
        "transform": [
          {
            "translateY": 1133.8999999999999,
          },
        ],
        "width": "18%",
        "zIndex": 2,
      }
    }
  >
    <Text />
    <View
      style={
        {
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "row",
          "justifyContent": "flex-start",
          "left": "50%",
          "position": "absolute",
          "width": "50%",
        }
      }
    />
  </View>
  <View
    collapsable={false}
    style={
      {
        "alignSelf": "center",
        "backgroundColor": "#f5faff",
        "borderColor": "transparent",
        "borderRadius": 15,
        "elevation": 9,
        "height": "40%",
        "overflow": "scroll",
        "position": "absolute",
        "shadowColor": "#000000",
        "shadowOffset": {
          "height": 5,
          "width": 0,
        },
        "shadowOpacity": 0.3,
        "shadowRadius": 6,
        "transform": [
          {
            "translateY": 1334,
          },
        ],
        "width": "88%",
        "zIndex": 3,
      }
    }
  >
    <View
      collapsable={false}
      handlerTag={1}
      handlerType="PanGestureHandler"
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      style={
        {
          "backgroundColor": "#f5faff",
          "borderBottomColor": "#1b1b1b2f",
          "borderBottomWidth": 2,
          "display": "flex",
          "flexDirection": "row",
          "height": "35%",
          "left": "5%",
          "width": "90%",
        }
      }
    >
      <View
        style={
          {
            "flexDirection": "column",
            "height": "100%",
            "justifyContent": "space-between",
            "width": "60%",
          }
        }
      >
        <View
          style={
            {
              "flexDirection": "row",
              "marginBottom": "1%",
            }
          }
        >
          <Text />
        </View>
      </View>
      <View
        style={
          {
            "flexDirection": "column",
            "height": "100%",
            "justifyContent": "space-between",
            "width": "40%",
          }
        }
      >
        <RNGestureHandlerButton
          collapsable={false}
          delayLongPress={600}
          enabled={true}
          exclusive={true}
          handlerTag={2}
          handlerType="NativeViewGestureHandler"
          onGestureEvent={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onHandlerStateChange={[Function]}
          rippleColor={0}
          touchSoundDisabled={false}
        >
          <View
            accessible={true}
            collapsable={false}
            style={
              {
                "backgroundColor": "#203d61",
                "borderRadius": 30,
                "marginBottom": "5%",
                "opacity": 1,
              }
            }
          />
        </RNGestureHandlerButton>
      </View>
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "#203d61",
            "borderRadius": 10,
            "display": "flex",
            "flexDirection": "row",
            "height": 20,
            "justifyContent": "center",
            "left": "97.5%",
            "position": "absolute",
            "top": "5%",
            "width": 20,
          }
        }
      >
        <Text />
      </View>
    </View>
    <View
      style={
        {
          "flex": 1,
          "overflow": "hidden",
        }
      }
    >
      <RCTScrollView
        applyWindowCorrection={[Function]}
        canChangeSize={true}
        contentContainerStyle={
          {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
            "paddingLeft": 46.875,
            "paddingRight": 0,
          }
        }
        contentHeight={0}
        contentWidth={0}
        data={[]}
        dataProvider={
          DataProvider {
            "_data": [],
            "_firstIndexToProcess": 0,
            "_hasStableIds": false,
            "_requiresDataChangeHandling": false,
            "_size": 0,
            "getStableId": [Function],
            "rowHasChanged": [Function],
          }
        }
        disableRecycling={false}
        estimatedItemSize={100}
        extendedState={{}}
        externalScrollView={[Function]}
        finalRenderAheadOffset={250}
        forceNonDeterministicRendering={true}
        horizontal={false}
        initialOffset={0}
        initialRenderIndex={0}
        isHorizontal={false}
        layoutProvider={
          GridLayoutProviderWithProps {
            "_acceptableRelayoutDelta": 1,
            "_getHeightOrWidth": [Function],
            "_getLayoutTypeForIndex": [Function],
            "_getSpan": [Function],
            "_hasExpired": false,
            "_maxSpan": 1,
            "_setLayoutForType": [Function],
            "_tempDim": {
              "height": 0,
              "width": 0,
            },
            "averageWindow": AverageWindow {
              "currentAverage": 100,
              "currentCount": 1,
              "inputValues": [
                100,
              ],
              "nextIndex": 1,
            },
            "defaultEstimatedItemSize": 100,
            "layoutObject": {
              "size": undefined,
              "span": undefined,
            },
            "props": {
              "contentContainerStyle": {
                "paddingBottom": 66.7,
                "paddingLeft": 46.875,
              },
              "data": [],
              "estimatedItemSize": 100,
              "numColumns": 1,
              "renderItem": [Function],
            },
            "renderWindowInsets": {
              "height": 0,
              "width": -46.875,
            },
            "shouldRefreshWithAnchoring": true,
          }
        }
        maxRenderAhead={750}
        numColumns={1}
        onEndReached={[Function]}
        onEndReachedThreshold={0}
        onEndReachedThresholdRelative={0}
        onItemLayout={[Function]}
        onLayout={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onSizeChanged={[Function]}
        onVisibleIndicesChanged={[Function]}
        removeClippedSubviews={false}
        renderAheadOffset={0}
        renderAheadStep={250}
        renderContentContainer={[Function]}
        renderItem={[Function]}
        renderItemContainer={[Function]}
        rowRenderer={[Function]}
        scrollEventThrottle={16}
        scrollThrottle={16}
        scrollViewProps={
          {
            "contentContainerStyle": {
              "backgroundColor": undefined,
              "minHeight": 1,
              "minWidth": 1,
              "paddingLeft": 46.875,
              "paddingRight": 0,
            },
            "onLayout": [Function],
            "onScrollBeginDrag": [Function],
            "refreshControl": undefined,
            "style": {
              "minHeight": 1,
              "minWidth": 1,
            },
          }
        }
        style={
          {
            "minHeight": 1,
            "minWidth": 1,
          }
        }
        suppressBoundedSizeException={true}
        windowCorrectionConfig={
          {
            "applyToInitialOffset": true,
            "applyToItemScroll": true,
            "value": {
              "endCorrection": 0,
              "startCorrection": 0,
              "windowShift": -0,
            },
          }
        }
      >
        <View>
          <View
            style={
              {
                "flexDirection": "column",
              }
            }
          >
            <View
              style={
                {
                  "paddingLeft": 46.875,
                  "paddingTop": 0,
                }
              }
            />
            <View
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <AutoLayoutView
              enableInstrumentation={false}
              horizontal={false}
              onBlankAreaEvent={[Function]}
              onLayout={[Function]}
              renderAheadOffset={0}
              scrollOffset={0}
              style={
                {
                  "height": 0,
                  "width": 0,
                }
              }
              windowSize={0}
            />
            <CellContainer
              index={-1}
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <View
              style={
                {
                  "paddingBottom": 66.7,
                  "paddingRight": 0,
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
  <View
    collapsable={false}
    style={
      {
        "height": "100%",
        "width": "100%",
      }
    }
  />
  <View
    style={
      [
        {
          "backgroundColor": "red",
          "borderRadius": 25,
          "display": "flex",
          "flexDirection": "column",
          "height": 50,
          "justifyContent": "center",
          "marginTop": 10,
          "overflow": "hidden",
          "shadowColor": "#000",
          "shadowOffset": {
            "height": 0,
            "width": 0,
          },
          "shadowOpacity": 0.25,
          "shadowRadius": 3.84,
          "width": 750,
        },
        {
          "borderColor": "#203d61",
          "borderWidth": 1,
          "height": 40,
          "left": "2.5%",
          "position": "absolute",
          "top": "5%",
          "width": "95%",
          "zIndex": 2,
        },
      ]
    }
  >
    <View
      style={
        {
          "backgroundColor": "white",
          "borderRadius": 25,
          "elevation": 10,
          "height": 50,
          "width": 750,
        }
      }
    >
      <Image
        source={1}
        style={
          {
            "height": 20,
            "left": 10,
            "position": "absolute",
            "top": 15,
            "width": 20,
          }
        }
      />
      <Text
        style={
          {
            "color": "#D3D3D3",
            "fontFamily": "jbm",
            "left": 40,
            "position": "absolute",
            "top": 15,
          }
        }
      >
        Search Address
      </Text>
      <TextInput
        onChangeText={[Function]}
        onSubmitEditing={[Function]}
        placeholderTextColor="#D3D3D3"
        style={
          {
            "backgroundColor": "rgba(0, 0, 0, 0)",
            "borderRadius": 25,
            "fontFamily": "jbm",
            "height": "100%",
            "paddingLeft": 40,
            "paddingRight": 10,
          }
        }
        value=""
      />
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "#f5faff",
            "display": "flex",
            "flexDirection": "column",
            "height": "50%",
            "justifyContent": "center",
            "left": "82.5%",
            "opacity": 1,
            "position": "absolute",
            "top": "25%",
            "width": "10%",
            "zIndex": 2,
          }
        }
      >
        <Text />
      </View>
    </View>
  </View>
</View>
`;
